{
  "stats": {
    "suites": 0,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-11T22:59:53.860Z",
    "end": "2023-10-11T22:59:54.564Z",
    "duration": 704,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
      "title": "",
      "fullFile": "",
      "file": "C:\\Users\\Cleartech\\OneDrive - Clearsale S.A\\Área de Trabalho\\ClearTech\\Repositório\\T4-ElvesMoura\\Sprint 15\\API Rique - Pactum JS\\test\\1category.post.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Teste 1 - POST (Nome de categoria correta com autenticação)",
          "fullTitle": "Teste 1 - POST (Nome de categoria correta com autenticação)",
          "timedOut": false,
          "duration": 63,
          "state": "passed",
          "speed": "medium",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let categoryName = generateRandomName()\nlet { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Categoria')\n  .withBody({\n    \"nome\": categoryName\n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "cab0d089-1dca-4d48-9e69-1248b04e02a9",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (Categoria já cadastrada)",
          "fullTitle": "Teste 2 - POST (Categoria já cadastrada)",
          "timedOut": false,
          "duration": 12,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Categoria')\n  .withBody({\n    \"nome\": \"Teste\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O nome 'Teste' já existe.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "e1d31225-eddc-4896-8b45-33117d059b2f",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - POST (Categoria com mais de 128 caracteres)",
          "fullTitle": "Teste 3 - POST (Categoria com mais de 128 caracteres)",
          "timedOut": false,
          "duration": 6,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Categoria')\n  .withBody({\n    \"nome\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O nome não pode conter mais de 128 caracteres.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "eb1dbe97-cd89-44c6-9478-f0bb76c714cb",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - POST (Categoria com caracteres especiais)",
          "fullTitle": "Teste 4 - POST (Categoria com caracteres especiais)",
          "timedOut": false,
          "duration": 12,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Categoria')\n  .withBody({\n    \"nome\": \"L3ite\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O nome não aceita caracteres especiais.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "513b8225-8e36-4a0d-86e3-54a706619e1a",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - POST (Cadastro da categoria com palavras usando acentos ou “ç”.)",
          "fullTitle": "Teste 5 - POST (Cadastro da categoria com palavras usando acentos ou “ç”.)",
          "timedOut": false,
          "duration": 28,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let categoryNameCedilla = generateRandomNameWithCedilla()\nlet { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Categoria')\n  .withBody({\n    \"nome\": categoryNameCedilla\n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "bbd02da7-81b6-4ae0-9413-3efac1350e0c",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 6 - POST (Categoria em branco)",
          "fullTitle": "Teste 6 - POST (Categoria em branco)",
          "timedOut": false,
          "duration": 5,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Categoria')\n  .withBody({\n    \"nome\": \" \"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O campo Nome é obrigatório.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "8bb9ac85-a242-415f-8080-6324b384cedf",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - POST (Nome de subcategoria correta com autenticação)",
          "fullTitle": "Teste 1 - POST (Nome de subcategoria correta com autenticação)",
          "timedOut": false,
          "duration": 10,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let subcategoryName = generateRandomName()\nlet { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Subcategoria')\n  .withBody({\n      \"nome\": subcategoryName,\n      \"status\": true,\n      \"categoriaId\": \"1015de8d-155b-484e-befd-7d12b6116ad3\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "4477b461-e4e7-4c4b-aa22-f40f9191c5b0",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (Subcategoria já cadastrada)",
          "fullTitle": "Teste 2 - POST (Subcategoria já cadastrada)",
          "timedOut": false,
          "duration": 11,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Subcategoria')\n  .withBody({\n    \"nome\": \"Teeeeeeeeeee\",\n    \"status\": true,\n    \"categoriaId\": \"1015de8d-155b-484e-befd-7d12b6116ad3\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O nome 'Teeeeeeeeeee' já existe.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "7a9af30a-fa4e-4ef5-8033-4425d9fc125a",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - POST (Subcategoria com mais de 128 caracteres)",
          "fullTitle": "Teste 3 - POST (Subcategoria com mais de 128 caracteres)",
          "timedOut": false,
          "duration": 5,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Subcategoria')\n  .withBody({\n    \"nome\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n    \"status\": true,\n    \"categoriaId\": \"1015de8d-155b-484e-befd-7d12b6116ad3\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O nome não pode conter mais de 128 caracteres.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "08220856-23d5-46c8-b12d-27fc0114d4a3",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - POST (Subcategoria com caracteres especiais)",
          "fullTitle": "Teste 4 - POST (Subcategoria com caracteres especiais)",
          "timedOut": false,
          "duration": 8,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Subcategoria')\n  .withBody({\n    \"nome\": \"L3ite\",\n    \"status\": true,\n    \"categoriaId\": \"1015de8d-155b-484e-befd-7d12b6116ad3\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O nome não aceita caracteres especiais.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "cac09d6d-2aa3-4281-8ee1-37773fbb13f4",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - POST (Cadastro da subcategoria com palavras usando acentos ou “ç”.)",
          "fullTitle": "Teste 5 - POST (Cadastro da subcategoria com palavras usando acentos ou “ç”.)",
          "timedOut": false,
          "duration": 11,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let subcategoryNameCedilla = generateRandomNameWithCedilla()\nlet { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Subcategoria')\n  .withBody({\n    \"nome\": subcategoryNameCedilla,\n    \"status\": true,\n    \"categoriaId\": \"1015de8d-155b-484e-befd-7d12b6116ad3\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "bbb65001-b718-4540-aa6e-8cf63e1f8869",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 6 - POST (Subcategoria em branco)",
          "fullTitle": "Teste 6 - POST (Subcategoria em branco)",
          "timedOut": false,
          "duration": 8,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/Subcategoria')\n  .withHeaders({\n    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWQiOiJkYjgyZGM5NS1iYjc1LTQ3YmEtODRhNi04NTQ3ZGRiN2M5NDgiLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOiJhZG1pbiIsImV4cCI6MTY5NzA1MjMzMH0.n4Vfqgi82fZIKD_wKzCjnulNUHp_64K67NeSVzxBN2M'\n  })\n  .withBody({\n    \"nome\": \" \",\n    \"status\": true,\n    \"categoriaId\": \"1015de8d-155b-484e-befd-7d12b6116ad3\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O campo Nome é obrigatório.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "a5fec9c7-d4dc-486f-9694-7852a5f00fe2",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - POST (Nome do CD correto com autenticação)",
          "fullTitle": "Teste 1 - POST (Nome do CD correto com autenticação)",
          "timedOut": false,
          "duration": 447,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let numbers = generateRandomNumber();\nlet { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/CentroDeDistribuicao')\n  .withBody({\n    \"nome\": \"CDNameee\",\n    \"cep\": \"02133040\",\n    \"numero\": numbers,\n    \"complemento\": \"Loja 1\"\n  })  \n  .expectResponseTime(1000)\n  .expectStatus(201);\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode);",
          "err": {},
          "uuid": "e793451e-c7f1-42b1-846d-90544bef4289",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (CD já cadastrada)",
          "fullTitle": "Teste 2 - POST (CD já cadastrada)",
          "timedOut": false,
          "duration": 14,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/CentroDeDistribuicao')\n  .withBody({\n    \"nome\": \"CD Vila Maria\",\n    \"cep\": \"02133040\",\n    \"numero\": 2,\n    \"complemento\": \"Loja 1\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O nome 'Cd Vila Maria' já existe.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "de829807-cb5b-41b7-923c-52c075f5bde4",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - POST (CD com mais de 128 caracteres)",
          "fullTitle": "Teste 3 - POST (CD com mais de 128 caracteres)",
          "timedOut": false,
          "duration": 9,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/CentroDeDistribuicao')\n  .withBody({\n    \"nome\": \"CD aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n    \"cep\": \"02133040\",\n    \"numero\": 2,\n    \"complemento\": \"Loja 1\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O campo Nome deve possuir um tamanho máximo de 128 caracteres.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "e82520eb-f01a-4459-9a4f-854e865693fd",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - POST (CD com nome em branco)",
          "fullTitle": "Teste 4 - POST (CD com nome em branco)",
          "timedOut": false,
          "duration": 10,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/CentroDeDistribuicao')\n  .withBody({\n    \"nome\": \" \",\n    \"cep\": \"02133040\",\n    \"numero\": 2,\n    \"complemento\": \"Loja 1\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O campo Nome é obrigatório.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "48a88015-bf37-4c25-ab9f-ecdcf474c992",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - POST (CEP incorreto)",
          "fullTitle": "Teste 5 - POST (CEP incorreto)",
          "timedOut": false,
          "duration": 8,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/CentroDeDistribuicao')\n  .withBody({\n    \"nome\": \"CD Vila Guilherme\",\n    \"cep\": \"0213300\",\n    \"numero\": 2,\n    \"complemento\": \"Loja 1\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O campo CEP deve possuir um tamanho mínimo de 8 caracteres.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "ebd3a864-bf7d-4ceb-91fc-793d5f086f36",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 6 - POST (Sem complemento)",
          "fullTitle": "Teste 6 - POST (Sem complemento)",
          "timedOut": false,
          "duration": 10,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let { responseTime, statusCode } = await spec()\n  .post('https://localhost:7296/CentroDeDistribuicao')\n  .withBody({\n    \"nome\": \"CD Vila Guilherme\",\n    \"cep\": \"02133040\",\n    \"numero\": 2,\n    \"complemento\": \" \"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"O campo Complemento é obrigatório.\");\nconsole.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "f9a177cf-c67c-41be-8780-9f41003bb51b",
          "parentUUID": "3fa13033-9c0d-4f9f-b221-4b36f47a4c06",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "cab0d089-1dca-4d48-9e69-1248b04e02a9",
        "e1d31225-eddc-4896-8b45-33117d059b2f",
        "eb1dbe97-cd89-44c6-9478-f0bb76c714cb",
        "513b8225-8e36-4a0d-86e3-54a706619e1a",
        "bbd02da7-81b6-4ae0-9413-3efac1350e0c",
        "8bb9ac85-a242-415f-8080-6324b384cedf",
        "4477b461-e4e7-4c4b-aa22-f40f9191c5b0",
        "7a9af30a-fa4e-4ef5-8033-4425d9fc125a",
        "08220856-23d5-46c8-b12d-27fc0114d4a3",
        "cac09d6d-2aa3-4281-8ee1-37773fbb13f4",
        "bbb65001-b718-4540-aa6e-8cf63e1f8869",
        "a5fec9c7-d4dc-486f-9694-7852a5f00fe2",
        "e793451e-c7f1-42b1-846d-90544bef4289",
        "de829807-cb5b-41b7-923c-52c075f5bde4",
        "e82520eb-f01a-4459-9a4f-854e865693fd",
        "48a88015-bf37-4c25-ab9f-ecdcf474c992",
        "ebd3a864-bf7d-4ceb-91fc-793d5f086f36",
        "f9a177cf-c67c-41be-8780-9f41003bb51b"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 677,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}