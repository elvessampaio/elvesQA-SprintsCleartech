{
  "stats": {
    "suites": 0,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-17T22:33:04.031Z",
    "end": "2023-08-17T22:33:10.404Z",
    "duration": 6373,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
      "title": "",
      "fullFile": "",
      "file": "C:\\Users\\Cleartech\\OneDrive - Clearsale S.A\\Área de Trabalho\\ClearTech\\Repositório\\T4-ElvesMoura\\Sprint 12\\API PactumJS\\test\\del.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Teste 1 - DEL (Sem informar ID)",
          "fullTitle": "Teste 1 - DEL (Sem informar ID)",
          "timedOut": false,
          "duration": 635,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/')\n  .expectResponseTime(1000)\n  .expectStatus(404);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "600ee809-72e7-42e2-be07-3a32b1d2daa1",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - DEL (informando o ID)",
          "fullTitle": "Teste 2 - DEL (informando o ID)",
          "timedOut": false,
          "duration": 622,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/1')\n  .expectResponseTime(1000)\n  .expectStatus(200);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "d0a801b5-0401-461b-a7fb-d563e2768d1b",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - GET (Informando uma referência)",
          "fullTitle": "Teste 1 - GET (Informando uma referência)",
          "timedOut": false,
          "duration": 393,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/1993/year')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"1993 is the year\");\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "7cfe5309-02b8-4a16-a713-3a70a847ac35",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - GET (Sem informar referência)",
          "fullTitle": "Teste 2 - GET (Sem informar referência)",
          "timedOut": false,
          "duration": 484,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "68fb9779-610b-4f46-b864-082136e2eac3",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - GET (Verificação de body)",
          "fullTitle": "Teste 3 - GET (Verificação de body)",
          "timedOut": false,
          "duration": 575,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://api.open-notify.org/iss-now.json')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"success\");\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "27b763fe-c1fb-49e7-bb81-a5300da53979",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - GET (ID não cadastrado)",
          "fullTitle": "Teste 4 - GET (ID não cadastrado)",
          "timedOut": false,
          "duration": 1802,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('https://swapi.dev/api/people/150')\n  .expectStatus(404)\n  .expectResponseTime(2000)\n  .expectBodyContains(\"Not found\");\n\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "bbfdfa8a-4ef1-4a81-8195-2ab7c8022fc0",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - GET",
          "fullTitle": "Teste 5 - GET",
          "timedOut": false,
          "duration": 269,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('https://api.dicebear.com/6.x/pixel-art/svg?seed=Elves')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "44690a9b-eda8-4a51-83a0-00b5cabab9d6",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - POST",
          "fullTitle": "Teste 1 - POST",
          "timedOut": false,
          "duration": 530,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .post('https://jsonplaceholder.typicode.com/posts')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29, \n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\n  .expectBodyContains(\"Elves\", 29,);\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "9b3381b8-ac9c-4a7c-8c33-b8ce19be4cfd",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - POST (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 270,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .post('http://numbersapi.com/1993/year')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "1756db84-ddff-4147-a55b-a51bf64d1ace",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - PUT",
          "fullTitle": "Teste 1 - PUT",
          "timedOut": false,
          "duration": 484,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('https://jsonplaceholder.typicode.com/posts/1')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBody({nome: 'Elves', idade: 30, id: 1})\n  \nconsole.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode);",
          "err": {},
          "uuid": "a103a38a-710c-40d2-80c2-a3b6bf1519cb",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - PUT (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - PUT (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 290,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('http://numbersapi.com')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "b8525c75-0ab4-4afa-8107-be6de1cd3582",
          "parentUUID": "3b7be91c-ced2-45bb-9e9d-3aea1fd89272",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "600ee809-72e7-42e2-be07-3a32b1d2daa1",
        "d0a801b5-0401-461b-a7fb-d563e2768d1b",
        "7cfe5309-02b8-4a16-a713-3a70a847ac35",
        "68fb9779-610b-4f46-b864-082136e2eac3",
        "27b763fe-c1fb-49e7-bb81-a5300da53979",
        "bbfdfa8a-4ef1-4a81-8195-2ab7c8022fc0",
        "44690a9b-eda8-4a51-83a0-00b5cabab9d6",
        "9b3381b8-ac9c-4a7c-8c33-b8ce19be4cfd",
        "1756db84-ddff-4147-a55b-a51bf64d1ace",
        "a103a38a-710c-40d2-80c2-a3b6bf1519cb",
        "b8525c75-0ab4-4afa-8107-be6de1cd3582"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 6354,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}