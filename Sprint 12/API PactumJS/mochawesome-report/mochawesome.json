{
  "stats": {
    "suites": 0,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-24T19:47:03.662Z",
    "end": "2023-08-24T19:47:10.307Z",
    "duration": 6645,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a62076fa-bbf7-437d-91fc-298bf4e13238",
      "title": "",
      "fullFile": "",
      "file": "C:\\Users\\Cleartech\\OneDrive - Clearsale S.A\\Área de Trabalho\\ClearTech\\Repositório\\T4-ElvesMoura\\Sprint 12\\API PactumJS\\test\\del.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Teste 1 - DEL (Sem informar ID)",
          "fullTitle": "Teste 1 - DEL (Sem informar ID)",
          "timedOut": false,
          "duration": 724,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/')\n  .expectResponseTime(1000)\n  .expectStatus(404);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "3ead6b83-8904-47b1-93ca-c622c33df2c9",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - DEL (informando o ID)",
          "fullTitle": "Teste 2 - DEL (informando o ID)",
          "timedOut": false,
          "duration": 607,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/1')\n  .expectResponseTime(1000)\n  .expectStatus(200);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "be2d09d7-5a43-4a35-96ca-0d5b70ba750d",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - GET",
          "fullTitle": "Teste 1 - GET",
          "timedOut": false,
          "duration": 201,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('https://api.dicebear.com/6.x/pixel-art/svg?seed=Elves')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "3ec43ec7-98b5-4ba0-ae29-27f0cb6cfea3",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - GET (Informando uma referência)",
          "fullTitle": "Teste 2 - GET (Informando uma referência)",
          "timedOut": false,
          "duration": 408,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/1993/year')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"1993 is the year\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "e21fd8aa-648f-4a0b-bc71-eebe43a055b2",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - GET (Sem informar referência)",
          "fullTitle": "Teste 3 - GET (Sem informar referência)",
          "timedOut": false,
          "duration": 609,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "6552116d-9f8c-402c-b607-c7c07c4e659c",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - GET (Verificação de body)",
          "fullTitle": "Teste 4 - GET (Verificação de body)",
          "timedOut": false,
          "duration": 631,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://api.open-notify.org/iss-now.json')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"success\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "dccc25c5-dae0-4718-8956-b4e4b8b3aaeb",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - GET (ID não cadastrado)",
          "fullTitle": "Teste 5 - GET (ID não cadastrado)",
          "timedOut": false,
          "duration": 1592,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {statusCode} = await spec()\n  .get('https://swapi.dev/api/people/150')\n  .expectStatus(404)\n  .expectResponseTime(5000)\n  .expectBodyContains(\"Not found\");\n  console.log('Status Code:', statusCode)",
          "err": {},
          "uuid": "0ad1b856-8b53-4da7-a0b6-e48fa3e7ba86",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 6 - GET (Sem as credencias definidas)",
          "fullTitle": "Teste 6 - GET (Sem as credencias definidas)",
          "timedOut": false,
          "duration": 7,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "00f18a74-d10d-4841-a2d1-2350e0a85bae",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 7 - GET (Credencias definidas corretamente)",
          "fullTitle": "Teste 7 - GET (Credencias definidas corretamente)",
          "timedOut": false,
          "duration": 88,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('aluno', 'senha')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "b3e1a500-0344-45b7-b4d8-d403722c9cdd",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 8 - GET (Credencias definidas incorretamente)",
          "fullTitle": "Teste 8 - GET (Credencias definidas incorretamente)",
          "timedOut": false,
          "duration": 84,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('senha', 'aluno')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "4e0c79f6-b73d-430e-8e40-d269f8d60e3b",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 8 - GET (Com as credencias definidas incorretas)",
          "fullTitle": "Teste 8 - GET (Com as credencias definidas incorretas)",
          "timedOut": false,
          "duration": 86,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('senha', 'aluno')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "42c1a29e-3890-45c8-a4c9-3e275516eedf",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - POST",
          "fullTitle": "Teste 1 - POST",
          "timedOut": false,
          "duration": 515,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .post('https://jsonplaceholder.typicode.com/posts')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29, \n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\n  .expectBodyContains(\"Elves\", 29,);\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "39cf42ad-bc1f-4661-8287-550356bf0458",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - POST (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 263,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://numbersapi.com/1993/year')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "08a9979a-27df-4a31-845d-927108816c54",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - POST (Body incorreto)",
          "fullTitle": "Teste 3 - POST (Body incorreto)",
          "timedOut": false,
          "duration": 7,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://localhost:8080/cliente')\n  .withBody({\n    \"none\": \"Elves\",\n    \"idade\": 30\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "01c8ebd8-b7d9-47fc-9f4b-b7964822f38c",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - PUT",
          "fullTitle": "Teste 1 - PUT",
          "timedOut": false,
          "duration": 497,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('https://jsonplaceholder.typicode.com/posts/1')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBody({nome: 'Elves', idade: 30, id: 1})\n  \nconsole.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode);",
          "err": {},
          "uuid": "6f6a151b-1839-4cee-a7ef-1ade4c39cdf3",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - PUT (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - PUT (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 290,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('http://numbersapi.com')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "5e6696f9-0f9b-4092-bd50-2c98fe16f3e6",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - PUT (Cliente não cadastrado)",
          "fullTitle": "Teste 3 - PUT (Cliente não cadastrado)",
          "timedOut": false,
          "duration": 7,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  .expectBodyContains(\"Cliente não encontrado\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "f49febe3-0935-437f-aced-52abf242bb99",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - PUT (Body incorreto)",
          "fullTitle": "Teste 4 - PUT (Body incorreto)",
          "timedOut": false,
          "duration": 7,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nomw\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "e4d8c896-d3ef-403b-9127-ae097693e7c1",
          "parentUUID": "a62076fa-bbf7-437d-91fc-298bf4e13238",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "3ead6b83-8904-47b1-93ca-c622c33df2c9",
        "be2d09d7-5a43-4a35-96ca-0d5b70ba750d",
        "3ec43ec7-98b5-4ba0-ae29-27f0cb6cfea3",
        "e21fd8aa-648f-4a0b-bc71-eebe43a055b2",
        "6552116d-9f8c-402c-b607-c7c07c4e659c",
        "dccc25c5-dae0-4718-8956-b4e4b8b3aaeb",
        "0ad1b856-8b53-4da7-a0b6-e48fa3e7ba86",
        "00f18a74-d10d-4841-a2d1-2350e0a85bae",
        "b3e1a500-0344-45b7-b4d8-d403722c9cdd",
        "4e0c79f6-b73d-430e-8e40-d269f8d60e3b",
        "42c1a29e-3890-45c8-a4c9-3e275516eedf",
        "39cf42ad-bc1f-4661-8287-550356bf0458",
        "08a9979a-27df-4a31-845d-927108816c54",
        "01c8ebd8-b7d9-47fc-9f4b-b7964822f38c",
        "6f6a151b-1839-4cee-a7ef-1ade4c39cdf3",
        "5e6696f9-0f9b-4092-bd50-2c98fe16f3e6",
        "f49febe3-0935-437f-aced-52abf242bb99",
        "e4d8c896-d3ef-403b-9127-ae097693e7c1"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 6623,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}