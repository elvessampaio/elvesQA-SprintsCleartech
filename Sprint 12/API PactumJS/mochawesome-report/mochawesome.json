{
  "stats": {
    "suites": 0,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-29T18:35:55.225Z",
    "end": "2023-08-29T18:35:59.536Z",
    "duration": 4311,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fdf711d1-aa61-4ffb-9535-0efff712481a",
      "title": "",
      "fullFile": "",
      "file": "C:\\Users\\Cleartech\\OneDrive - Clearsale S.A\\Área de Trabalho\\ClearTech\\Repositório\\T4-ElvesMoura\\Sprint 12\\API PactumJS\\test\\del.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Teste 1 - DEL (Sem informar ID)",
          "fullTitle": "Teste 1 - DEL (Sem informar ID)",
          "timedOut": false,
          "duration": 569,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/')\n  .expectResponseTime(1000)\n  .expectStatus(404);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "ea613fe7-3aff-4f65-b537-45dee7f203ce",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - DEL (informando o ID)",
          "fullTitle": "Teste 2 - DEL (informando o ID)",
          "timedOut": false,
          "duration": 570,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/1')\n  .expectResponseTime(1000)\n  .expectStatus(200);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "03d7a0d0-0e16-41e4-88bd-a694105730fb",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - GET",
          "fullTitle": "Teste 1 - GET",
          "timedOut": false,
          "duration": 94,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('https://api.dicebear.com/6.x/pixel-art/svg?seed=Elves')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "287d3f8d-8f59-4ce0-bf5d-0c67b8514c2e",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - GET (Informando uma referência)",
          "fullTitle": "Teste 2 - GET (Informando uma referência)",
          "timedOut": false,
          "duration": 290,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/1993/year')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"1993 is the year\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "fe8ec2b1-fcac-4a6a-9161-88199122aef2",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - GET (Sem informar referência)",
          "fullTitle": "Teste 3 - GET (Sem informar referência)",
          "timedOut": false,
          "duration": 429,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "83989fe4-759b-409e-b45e-7eba285932a9",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - GET (Verificação de body)",
          "fullTitle": "Teste 4 - GET (Verificação de body)",
          "timedOut": false,
          "duration": 571,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://api.open-notify.org/iss-now.json')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"success\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "b798c7cb-fc9e-4fa2-9b47-083675ca76a5",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - GET (ID não cadastrado)",
          "fullTitle": "Teste 5 - GET (ID não cadastrado)",
          "timedOut": false,
          "duration": 7,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n    .get('http://localhost:8080/cliente/1')\n    .expectStatus(404)\n    .expectBodyContains(\"Cliente não encontrado\")\n    .expectResponseTime(1000)\n  \n    console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "9b31e72b-4c95-48e7-abd6-f60d2766a864",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 6 - GET (Sem as credencias definidas)",
          "fullTitle": "Teste 6 - GET (Sem as credencias definidas)",
          "timedOut": false,
          "duration": 5,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "1c0c19cf-5063-4bdc-98a5-4dc0bd6eda28",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 7 - GET (Credencias definidas corretamente)",
          "fullTitle": "Teste 7 - GET (Credencias definidas corretamente)",
          "timedOut": false,
          "duration": 86,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('aluno', 'senha')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "c93bacdc-672f-421d-a8d6-28f9f3fe8136",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 8 - GET (Credencias definidas incorretamente)",
          "fullTitle": "Teste 8 - GET (Credencias definidas incorretamente)",
          "timedOut": false,
          "duration": 88,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('senha', 'aluno')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "b638c56f-5fe5-4557-864b-8ea4ff5c28a0",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - POST",
          "fullTitle": "Teste 1 - POST",
          "timedOut": false,
          "duration": 532,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .post('https://jsonplaceholder.typicode.com/posts')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29, \n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\n  .expectBodyContains(\"Elves\", 29,);\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "3252f87f-fd95-41f0-b091-5df1702184f5",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - POST (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 267,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://numbersapi.com/1993/year')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "db1b98fc-53b8-44b3-acb3-6ccd4272fdf3",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - POST (Body incorreto)",
          "fullTitle": "Teste 3 - POST (Body incorreto)",
          "timedOut": false,
          "duration": 4,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://localhost:8080/cliente')\n  .withBody({\n    \"none\": \"Elves\",\n    \"idade\": 30\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "44887ded-0478-418d-a2ce-b431d1c5f9fb",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - PUT",
          "fullTitle": "Teste 1 - PUT",
          "timedOut": false,
          "duration": 517,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('https://jsonplaceholder.typicode.com/posts/1')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBody({nome: 'Elves', idade: 30, id: 1})\n  \nconsole.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode);",
          "err": {},
          "uuid": "5fed3ae0-5e30-4b81-aece-33b00ac90251",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - PUT (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - PUT (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 260,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('http://numbersapi.com')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "e7c22e4c-9388-4db2-89e8-06b49d6ab961",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - PUT (Cliente não cadastrado)",
          "fullTitle": "Teste 3 - PUT (Cliente não cadastrado)",
          "timedOut": false,
          "duration": 4,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  .expectBodyContains(\"Cliente não encontrado\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "365551e7-76ca-4a70-842c-4ab4d643b21e",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - PUT (Body incorreto)",
          "fullTitle": "Teste 4 - PUT (Body incorreto)",
          "timedOut": false,
          "duration": 6,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nomw\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "2ec114d3-ba91-44f9-b20b-576f5e34346d",
          "parentUUID": "fdf711d1-aa61-4ffb-9535-0efff712481a",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "ea613fe7-3aff-4f65-b537-45dee7f203ce",
        "03d7a0d0-0e16-41e4-88bd-a694105730fb",
        "287d3f8d-8f59-4ce0-bf5d-0c67b8514c2e",
        "fe8ec2b1-fcac-4a6a-9161-88199122aef2",
        "83989fe4-759b-409e-b45e-7eba285932a9",
        "b798c7cb-fc9e-4fa2-9b47-083675ca76a5",
        "9b31e72b-4c95-48e7-abd6-f60d2766a864",
        "1c0c19cf-5063-4bdc-98a5-4dc0bd6eda28",
        "c93bacdc-672f-421d-a8d6-28f9f3fe8136",
        "b638c56f-5fe5-4557-864b-8ea4ff5c28a0",
        "3252f87f-fd95-41f0-b091-5df1702184f5",
        "db1b98fc-53b8-44b3-acb3-6ccd4272fdf3",
        "44887ded-0478-418d-a2ce-b431d1c5f9fb",
        "5fed3ae0-5e30-4b81-aece-33b00ac90251",
        "e7c22e4c-9388-4db2-89e8-06b49d6ab961",
        "365551e7-76ca-4a70-842c-4ab4d643b21e",
        "2ec114d3-ba91-44f9-b20b-576f5e34346d"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 4299,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}