{
  "stats": {
    "suites": 0,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-24T19:40:32.889Z",
    "end": "2023-08-24T19:40:39.725Z",
    "duration": 6836,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
      "title": "",
      "fullFile": "",
      "file": "C:\\Users\\Cleartech\\OneDrive - Clearsale S.A\\Área de Trabalho\\ClearTech\\Repositório\\T4-ElvesMoura\\Sprint 12\\API PactumJS\\test\\del.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Teste 1 - DEL (Sem informar ID)",
          "fullTitle": "Teste 1 - DEL (Sem informar ID)",
          "timedOut": false,
          "duration": 770,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/')\n  .expectResponseTime(1000)\n  .expectStatus(404);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "35ab21f8-8fad-4f2e-9ce5-f19770e6388e",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - DEL (informando o ID)",
          "fullTitle": "Teste 2 - DEL (informando o ID)",
          "timedOut": false,
          "duration": 579,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/1')\n  .expectResponseTime(1000)\n  .expectStatus(200);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "9e88b522-80e5-40ff-996f-9c2296363bfc",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - GET",
          "fullTitle": "Teste 1 - GET",
          "timedOut": false,
          "duration": 220,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('https://api.dicebear.com/6.x/pixel-art/svg?seed=Elves')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .end();\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "6de8bc53-1d03-438f-9144-4094ca44c503",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - GET (Informando uma referência)",
          "fullTitle": "Teste 2 - GET (Informando uma referência)",
          "timedOut": false,
          "duration": 381,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/1993/year')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"1993 is the year\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "260cee71-e760-4d78-aa3f-cb8879cf9b45",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - GET (Sem informar referência)",
          "fullTitle": "Teste 3 - GET (Sem informar referência)",
          "timedOut": false,
          "duration": 614,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "0ff0ce13-c606-42e8-9b62-733955706e52",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - GET (Verificação de body)",
          "fullTitle": "Teste 4 - GET (Verificação de body)",
          "timedOut": false,
          "duration": 619,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://api.open-notify.org/iss-now.json')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"success\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "4295b8f8-3192-4c7e-b0b9-bbcdf7439462",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - GET (ID não cadastrado)",
          "fullTitle": "Teste 5 - GET (ID não cadastrado)",
          "timedOut": false,
          "duration": 1598,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "try {\n  const { responseTime, statusCode } = await spec()\n    .get('https://swapi.dev/api/people/150')\n    .expectStatus(404)\n    .expectBodyContains(\"Not found\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode);\n} catch (error) {\n  console.error('Erro:', error);\n}",
          "err": {},
          "uuid": "9f17481f-9cbd-4b95-9298-faf2b43621ef",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 6 - GET (Sem as credencias definidas)",
          "fullTitle": "Teste 6 - GET (Sem as credencias definidas)",
          "timedOut": false,
          "duration": 5,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "52f35ef1-8027-4667-8347-596f006d6735",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 7 - GET (Credencias definidas corretamente)",
          "fullTitle": "Teste 7 - GET (Credencias definidas corretamente)",
          "timedOut": false,
          "duration": 123,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('aluno', 'senha')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "ce66e345-2524-4a06-870c-88a74965dcde",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 8 - GET (Credencias definidas incorretamente)",
          "fullTitle": "Teste 8 - GET (Credencias definidas incorretamente)",
          "timedOut": false,
          "duration": 121,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('senha', 'aluno')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "2539ff8a-30a6-4be2-94c9-c78e5ee73ecb",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 8 - GET (Com as credencias definidas incorretas)",
          "fullTitle": "Teste 8 - GET (Com as credencias definidas incorretas)",
          "timedOut": false,
          "duration": 122,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('senha', 'aluno')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "faf4ead7-9eb2-4a48-8b18-e1e3eadca5f6",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - POST",
          "fullTitle": "Teste 1 - POST",
          "timedOut": false,
          "duration": 533,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .post('https://jsonplaceholder.typicode.com/posts')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29, \n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\n  .expectBodyContains(\"Elves\", 29,);\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "f46b1f40-cb61-4819-9b00-2d4cb3f84b7d",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - POST (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 295,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://numbersapi.com/1993/year')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "d80699a7-4bc1-4510-b0e9-489ed9a9b66c",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - POST (Body incorreto)",
          "fullTitle": "Teste 3 - POST (Body incorreto)",
          "timedOut": false,
          "duration": 7,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://localhost:8080/cliente')\n  .withBody({\n    \"none\": \"Elves\",\n    \"idade\": 30\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "70657ffa-8c8a-4d72-9410-2c0fef56bdf5",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - PUT",
          "fullTitle": "Teste 1 - PUT",
          "timedOut": false,
          "duration": 523,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('https://jsonplaceholder.typicode.com/posts/1')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBody({nome: 'Elves', idade: 30, id: 1})\n  \nconsole.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode);",
          "err": {},
          "uuid": "cfc3dbea-26dd-431a-99c8-6c0783c51af4",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - PUT (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - PUT (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 296,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('http://numbersapi.com')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "e9c78fc0-58dc-438d-b277-9a00728e549a",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - PUT (Cliente não cadastrado)",
          "fullTitle": "Teste 3 - PUT (Cliente não cadastrado)",
          "timedOut": false,
          "duration": 4,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  .expectBodyContains(\"Cliente não encontrado\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "8f5a91c2-9897-44e6-91c3-b0b017451ab8",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - PUT (Body incorreto)",
          "fullTitle": "Teste 4 - PUT (Body incorreto)",
          "timedOut": false,
          "duration": 5,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nomw\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "8a87e2f2-2704-408c-8d24-34846f7f7175",
          "parentUUID": "1a8c59ac-a645-458f-947c-3e7881d58dd5",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "35ab21f8-8fad-4f2e-9ce5-f19770e6388e",
        "9e88b522-80e5-40ff-996f-9c2296363bfc",
        "6de8bc53-1d03-438f-9144-4094ca44c503",
        "260cee71-e760-4d78-aa3f-cb8879cf9b45",
        "0ff0ce13-c606-42e8-9b62-733955706e52",
        "4295b8f8-3192-4c7e-b0b9-bbcdf7439462",
        "9f17481f-9cbd-4b95-9298-faf2b43621ef",
        "52f35ef1-8027-4667-8347-596f006d6735",
        "ce66e345-2524-4a06-870c-88a74965dcde",
        "2539ff8a-30a6-4be2-94c9-c78e5ee73ecb",
        "faf4ead7-9eb2-4a48-8b18-e1e3eadca5f6",
        "f46b1f40-cb61-4819-9b00-2d4cb3f84b7d",
        "d80699a7-4bc1-4510-b0e9-489ed9a9b66c",
        "70657ffa-8c8a-4d72-9410-2c0fef56bdf5",
        "cfc3dbea-26dd-431a-99c8-6c0783c51af4",
        "e9c78fc0-58dc-438d-b277-9a00728e549a",
        "8f5a91c2-9897-44e6-91c3-b0b017451ab8",
        "8a87e2f2-2704-408c-8d24-34846f7f7175"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 6815,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}