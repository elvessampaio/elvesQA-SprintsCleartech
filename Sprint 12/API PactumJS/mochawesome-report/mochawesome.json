{
  "stats": {
    "suites": 0,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-25T13:58:30.656Z",
    "end": "2023-08-25T13:58:36.705Z",
    "duration": 6049,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
      "title": "",
      "fullFile": "",
      "file": "C:\\Users\\Cleartech\\OneDrive - Clearsale S.A\\Área de Trabalho\\ClearTech\\Repositório\\T4-ElvesMoura\\Sprint 12\\API PactumJS\\test\\del.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Teste 1 - DEL (Sem informar ID)",
          "fullTitle": "Teste 1 - DEL (Sem informar ID)",
          "timedOut": false,
          "duration": 723,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/')\n  .expectResponseTime(1000)\n  .expectStatus(404);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "10d14d60-6d75-4b58-8406-5c5da3c694bc",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - DEL (informando o ID)",
          "fullTitle": "Teste 2 - DEL (informando o ID)",
          "timedOut": false,
          "duration": 506,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/1')\n  .expectResponseTime(1000)\n  .expectStatus(200);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "ea073c75-f913-4a1f-9d7e-1ca06d292983",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - GET",
          "fullTitle": "Teste 1 - GET",
          "timedOut": false,
          "duration": 146,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('https://api.dicebear.com/6.x/pixel-art/svg?seed=Elves')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "bb1120a1-bb8f-451e-aea2-d304f3e7ad0f",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - GET (Informando uma referência)",
          "fullTitle": "Teste 2 - GET (Informando uma referência)",
          "timedOut": false,
          "duration": 293,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/1993/year')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"1993 is the year\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "e4bdc687-1113-4b61-a081-8f248c04a424",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - GET (Sem informar referência)",
          "fullTitle": "Teste 3 - GET (Sem informar referência)",
          "timedOut": false,
          "duration": 424,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "120f4c2e-d02c-4456-bd77-5ab040531a6e",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - GET (Verificação de body)",
          "fullTitle": "Teste 4 - GET (Verificação de body)",
          "timedOut": false,
          "duration": 555,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://api.open-notify.org/iss-now.json')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"success\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "74f4610e-4476-4cb7-8487-61d8b554efa8",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - GET (ID não cadastrado)",
          "fullTitle": "Teste 5 - GET (ID não cadastrado)",
          "timedOut": false,
          "duration": 1580,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const timeOutDuration = 5000;\n  let {responseTime, statusCode} = await spec()\n    .get('https://swapi.dev/api/people/150')\n    .expectStatus(404)\n    .expectBodyContains(\"Not found\")\n    .expectResponseTime(timeOutDuration)\n  \n    console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)\n    if (responseTime > 1000) { \n      console.log('Tempo da requisição é superior a 1000 ms. Teste Ok.');\n    } else {\n      console.log('Tempo de requisição está dentro do aceitável.');\n    }",
          "err": {},
          "uuid": "f7d25238-ffde-475e-ad76-c792fea35498",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 6 - GET (Sem as credencias definidas)",
          "fullTitle": "Teste 6 - GET (Sem as credencias definidas)",
          "timedOut": false,
          "duration": 6,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "e5a4c332-0db4-4f8c-a4cf-a95483070b12",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 7 - GET (Credencias definidas corretamente)",
          "fullTitle": "Teste 7 - GET (Credencias definidas corretamente)",
          "timedOut": false,
          "duration": 102,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('aluno', 'senha')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "222c41fc-40ef-4e8d-8a86-03887d253dd1",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 8 - GET (Credencias definidas incorretamente)",
          "fullTitle": "Teste 8 - GET (Credencias definidas incorretamente)",
          "timedOut": false,
          "duration": 110,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('senha', 'aluno')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "4d8a422f-32cb-4796-bbae-e89499b035b3",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - POST",
          "fullTitle": "Teste 1 - POST",
          "timedOut": false,
          "duration": 519,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .post('https://jsonplaceholder.typicode.com/posts')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29, \n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\n  .expectBodyContains(\"Elves\", 29,);\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "d56b0200-737c-408f-a2aa-853b814be6e0",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - POST (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 261,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://numbersapi.com/1993/year')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "213cc456-e30b-494e-b838-086f3fe24290",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - POST (Body incorreto)",
          "fullTitle": "Teste 3 - POST (Body incorreto)",
          "timedOut": false,
          "duration": 7,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://localhost:8080/cliente')\n  .withBody({\n    \"none\": \"Elves\",\n    \"idade\": 30\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "bc950405-96e9-439d-9543-6aa08900e715",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - PUT",
          "fullTitle": "Teste 1 - PUT",
          "timedOut": false,
          "duration": 516,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('https://jsonplaceholder.typicode.com/posts/1')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBody({nome: 'Elves', idade: 30, id: 1})\n  \nconsole.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode);",
          "err": {},
          "uuid": "3c92accb-64a1-4a52-8a92-4bcc5db47e44",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - PUT (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - PUT (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 261,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('http://numbersapi.com')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "5911227a-66fa-463c-8745-ebe50bc82ec3",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - PUT (Cliente não cadastrado)",
          "fullTitle": "Teste 3 - PUT (Cliente não cadastrado)",
          "timedOut": false,
          "duration": 8,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  .expectBodyContains(\"Cliente não encontrado\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "111222da-e73c-465b-8867-f3c2d1b2f693",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - PUT (Body incorreto)",
          "fullTitle": "Teste 4 - PUT (Body incorreto)",
          "timedOut": false,
          "duration": 9,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nomw\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "c18a7916-229e-4ce1-9c6a-499579e9ba76",
          "parentUUID": "6b890fbe-8a08-4b00-a0a9-83db9ab6ce00",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "10d14d60-6d75-4b58-8406-5c5da3c694bc",
        "ea073c75-f913-4a1f-9d7e-1ca06d292983",
        "bb1120a1-bb8f-451e-aea2-d304f3e7ad0f",
        "e4bdc687-1113-4b61-a081-8f248c04a424",
        "120f4c2e-d02c-4456-bd77-5ab040531a6e",
        "74f4610e-4476-4cb7-8487-61d8b554efa8",
        "f7d25238-ffde-475e-ad76-c792fea35498",
        "e5a4c332-0db4-4f8c-a4cf-a95483070b12",
        "222c41fc-40ef-4e8d-8a86-03887d253dd1",
        "4d8a422f-32cb-4796-bbae-e89499b035b3",
        "d56b0200-737c-408f-a2aa-853b814be6e0",
        "213cc456-e30b-494e-b838-086f3fe24290",
        "bc950405-96e9-439d-9543-6aa08900e715",
        "3c92accb-64a1-4a52-8a92-4bcc5db47e44",
        "5911227a-66fa-463c-8745-ebe50bc82ec3",
        "111222da-e73c-465b-8867-f3c2d1b2f693",
        "c18a7916-229e-4ce1-9c6a-499579e9ba76"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 6026,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}