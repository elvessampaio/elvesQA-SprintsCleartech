{
  "stats": {
    "suites": 0,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-24T19:50:30.051Z",
    "end": "2023-08-24T19:50:37.042Z",
    "duration": 6991,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
      "title": "",
      "fullFile": "",
      "file": "C:\\Users\\Cleartech\\OneDrive - Clearsale S.A\\Área de Trabalho\\ClearTech\\Repositório\\T4-ElvesMoura\\Sprint 12\\API PactumJS\\test\\del.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Teste 1 - DEL (Sem informar ID)",
          "fullTitle": "Teste 1 - DEL (Sem informar ID)",
          "timedOut": false,
          "duration": 781,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/')\n  .expectResponseTime(1000)\n  .expectStatus(404);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "0497b128-c9d9-4429-ac9a-b56b0b48f7c8",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - DEL (informando o ID)",
          "fullTitle": "Teste 2 - DEL (informando o ID)",
          "timedOut": false,
          "duration": 621,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .delete('https://jsonplaceholder.typicode.com/posts/1')\n  .expectResponseTime(1000)\n  .expectStatus(200);\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "212b2b08-33c5-444b-bf36-b2a4d5bc18d9",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - GET",
          "fullTitle": "Teste 1 - GET",
          "timedOut": false,
          "duration": 222,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('https://api.dicebear.com/6.x/pixel-art/svg?seed=Elves')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "315c8490-7805-4e31-907d-fe2abbe070bc",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - GET (Informando uma referência)",
          "fullTitle": "Teste 2 - GET (Informando uma referência)",
          "timedOut": false,
          "duration": 365,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/1993/year')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"1993 is the year\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "ad98a937-2ec2-4d13-b738-da1766f43024",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - GET (Sem informar referência)",
          "fullTitle": "Teste 3 - GET (Sem informar referência)",
          "timedOut": false,
          "duration": 613,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://numbersapi.com/')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "dcc388fd-5f88-47af-8637-e4e56529f661",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - GET (Verificação de body)",
          "fullTitle": "Teste 4 - GET (Verificação de body)",
          "timedOut": false,
          "duration": 617,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://api.open-notify.org/iss-now.json')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBodyContains(\"success\")\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "69ba6261-684d-4f42-8e7e-30276b270ab4",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 5 - GET (ID não cadastrado)",
          "fullTitle": "Teste 5 - GET (ID não cadastrado)",
          "timedOut": false,
          "duration": 1707,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {statusCode} = await spec()\n  .get('https://swapi.dev/api/people/150')\n  .expectStatus(404)\n  .expectResponseTime(5000)\n  .expectBodyContains(\"Not found\");\n  console.log('Status Code:', statusCode)",
          "err": {},
          "uuid": "7cc3a02a-2f79-4041-9d33-278ec7c35f74",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 6 - GET (Sem as credencias definidas)",
          "fullTitle": "Teste 6 - GET (Sem as credencias definidas)",
          "timedOut": false,
          "duration": 8,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "3eb64f6b-0b08-4da3-8772-83bf79bd9130",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 7 - GET (Credencias definidas corretamente)",
          "fullTitle": "Teste 7 - GET (Credencias definidas corretamente)",
          "timedOut": false,
          "duration": 124,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('aluno', 'senha')\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "eb914413-9bd8-49e9-9ffa-ffa0623ed094",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 8 - GET (Credencias definidas incorretamente)",
          "fullTitle": "Teste 8 - GET (Credencias definidas incorretamente)",
          "timedOut": false,
          "duration": 160,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('senha', 'aluno')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "ab097757-ebe4-4ff0-83d4-59e6243e4463",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 8 - GET (Com as credencias definidas incorretas)",
          "fullTitle": "Teste 8 - GET (Com as credencias definidas incorretas)",
          "timedOut": false,
          "duration": 118,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .get('http://localhost:8080/risco/7041386')\n  .withAuth('senha', 'aluno')\n  .expectResponseTime(1000)\n  .expectStatus(401)\n  .expectBodyContains(\"Unauthorized\")\n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "c343f929-dec3-46ed-a2da-9a8baa5ebc50",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - POST",
          "fullTitle": "Teste 1 - POST",
          "timedOut": false,
          "duration": 518,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .post('https://jsonplaceholder.typicode.com/posts')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29, \n  })\n  .expectResponseTime(1000)\n  .expectStatus(201)\n  .expectBodyContains(\"Elves\", 29,);\n  \n  console.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "c8c478a4-8cb2-4c7d-93e0-add38ac1a400",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - POST (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - POST (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 265,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://numbersapi.com/1993/year')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "40276fc3-d37f-49e7-b174-47e6d0c3e412",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - POST (Body incorreto)",
          "fullTitle": "Teste 3 - POST (Body incorreto)",
          "timedOut": false,
          "duration": 8,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .post('http://localhost:8080/cliente')\n  .withBody({\n    \"none\": \"Elves\",\n    \"idade\": 30\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "4a64fd2b-983a-44c0-b940-1cb9886e1148",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 1 - PUT",
          "fullTitle": "Teste 1 - PUT",
          "timedOut": false,
          "duration": 524,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('https://jsonplaceholder.typicode.com/posts/1')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"\"\n  })\n  .expectResponseTime(1000)\n  .expectStatus(200)\n  .expectBody({nome: 'Elves', idade: 30, id: 1})\n  \nconsole.log(body, 'Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode);",
          "err": {},
          "uuid": "50061d4e-2fcd-4f9a-bc20-3b5bc8f4590c",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 2 - PUT (URL que aceita apenas GET)",
          "fullTitle": "Teste 2 - PUT (URL que aceita apenas GET)",
          "timedOut": false,
          "duration": 308,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {body, responseTime, statusCode} = await spec()\n  .put('http://numbersapi.com')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 29,\n  })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "d24ffd5c-1c6b-4216-8217-575368a6f5a6",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 3 - PUT (Cliente não cadastrado)",
          "fullTitle": "Teste 3 - PUT (Cliente não cadastrado)",
          "timedOut": false,
          "duration": 5,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nome\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(404)\n  .expectBodyContains(\"Cliente não encontrado\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "a66ca9ef-3f91-43b3-9f5f-9a904fe52133",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Teste 4 - PUT (Body incorreto)",
          "fullTitle": "Teste 4 - PUT (Body incorreto)",
          "timedOut": false,
          "duration": 6,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "let {responseTime, statusCode} = await spec()\n  .put('http://localhost:8080/cliente')\n  .withBody({\n    \"nomw\": \"Elves\",\n    \"idade\": 30,\n    \"id\": \"1\"\n    })\n  .expectResponseTime(1000)\n  .expectStatus(400)\n  .expectBodyContains(\"Bad Request\");\n  \n  console.log('Tempo de requisição:', responseTime, '|', 'Status Code:', statusCode)",
          "err": {},
          "uuid": "833d1c8d-4b40-4f1c-9ec6-3a4000ef950a",
          "parentUUID": "0bf8a58d-8fcf-4e70-87d4-46364c4f80b0",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "0497b128-c9d9-4429-ac9a-b56b0b48f7c8",
        "212b2b08-33c5-444b-bf36-b2a4d5bc18d9",
        "315c8490-7805-4e31-907d-fe2abbe070bc",
        "ad98a937-2ec2-4d13-b738-da1766f43024",
        "dcc388fd-5f88-47af-8637-e4e56529f661",
        "69ba6261-684d-4f42-8e7e-30276b270ab4",
        "7cc3a02a-2f79-4041-9d33-278ec7c35f74",
        "3eb64f6b-0b08-4da3-8772-83bf79bd9130",
        "eb914413-9bd8-49e9-9ffa-ffa0623ed094",
        "ab097757-ebe4-4ff0-83d4-59e6243e4463",
        "c343f929-dec3-46ed-a2da-9a8baa5ebc50",
        "c8c478a4-8cb2-4c7d-93e0-add38ac1a400",
        "40276fc3-d37f-49e7-b174-47e6d0c3e412",
        "4a64fd2b-983a-44c0-b940-1cb9886e1148",
        "50061d4e-2fcd-4f9a-bc20-3b5bc8f4590c",
        "d24ffd5c-1c6b-4216-8217-575368a6f5a6",
        "a66ca9ef-3f91-43b3-9f5f-9a904fe52133",
        "833d1c8d-4b40-4f1c-9ec6-3a4000ef950a"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 6970,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}